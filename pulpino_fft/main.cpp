#include<stdio.h>
#define NINPUTS  256
#define SWAP(a, b) tmp=(a); (a)=(b); (b)=tmp

// - Cac du lieu da cung cap
// + wprBase va wpiBase: Cac he so co so dung trong qua trinh bien doi
// + dataR1 va dataI1: Du lieu inputs
// + ref: output de kiem tra ket qua


static short wprBase[] = {
	32767,  32758,  32729,  32679,  32610,  32522,  32413,  32286,
	32138,  31972,  31786,  31581,  31357,  31114,  30853,  30572,
	30274,  29957,  29622,  29269,  28899,  28511,  28106,  27684,
	27246,  26791,  26320,  25833,  25330,  24812,  24279,  23732,
	23170,  22595,  22006,  21403,  20788,  20160,  19520,  18868,
	18205,  17531,  16846,  16151,  15447,  14733,  14010,  13279,
	12540,  11793,  11039,  10279,   9512,   8740,   7962,   7180,
	6393,   5602,   4808,   4011,   3212,   2411,   1608,    804,
	0,   -804,  -1608,  -2411,  -3212,  -4011,  -4808,  -5602,
	-6393,  -7180,  -7962,  -8740,  -9512, -10279, -11039, -11793,
	-12540, -13279, -14010, -14733, -15447, -16151, -16846, -17531,
	-18205, -18868, -19520, -20160, -20788, -21403, -22006, -22595,
	-23170, -23732, -24279, -24812, -25330, -25833, -26320, -26791,
	-27246, -27684, -28106, -28511, -28899, -29269, -29622, -29957,
	-30274, -30572, -30853, -31114, -31357, -31581, -31786, -31972,
	-32138, -32286, -32413, -32522, -32610, -32679, -32729, -32758,
};

static short wpiBase[] = {
	0,    804,   1608,   2411,   3212,   4011,   4808,   5602,
	6393,   7180,   7962,   8740,   9512,  10279,  11039,  11793,
	12540,  13279,  14010,  14733,  15447,  16151,  16846,  17531,
	18205,  18868,  19520,  20160,  20788,  21403,  22006,  22595,
	23170,  23732,  24279,  24812,  25330,  25833,  26320,  26791,
	27246,  27684,  28106,  28511,  28899,  29269,  29622,  29957,
	30274,  30572,  30853,  31114,  31357,  31581,  31786,  31972,
	32138,  32286,  32413,  32522,  32610,  32679,  32729,  32758,
	32767,  32758,  32729,  32679,  32610,  32522,  32413,  32286,
	32138,  31972,  31786,  31581,  31357,  31114,  30853,  30572,
	30274,  29957,  29622,  29269,  28899,  28511,  28106,  27684,
	27246,  26791,  26320,  25833,  25330,  24812,  24279,  23732,
	23170,  22595,  22006,  21403,  20788,  20160,  19520,  18868,
	18205,  17531,  16846,  16151,  15447,  14733,  14010,  13279,
	12540,  11793,  11039,  10279,   9512,   8740,   7962,   7180,
	6393,   5602,   4808,   4011,   3212,   2411,   1608,    804,
};



short ref[2 * NINPUTS] = {
	/* outputs for test 1 */
	6, 13, -47, -11, 91, 38, 44, 30, 48, 21, 48, 13,
	71, 26, 92, 41, 162, 76, 598, 139, -1002, -60, -284, 59,
	-210, 40, -154, 65, -100, 67, -23, 35, -98, 92, -18, 96,
	-125, 53, -414, 121, 135, 80, 78, 37, 62, 57, 29, 19,
	40, -16, 84, 115, 23, -6, 52, 8, -3, -52, 283, 126,
	123, -38, 50, -63, 28, -16, 31, -78, 31, -36, -2, -62,
	-12, -54, -33, -43, -1, 60, -12, -141, -44, -49, -21, -68,
	-62, -59, -32, -61, -39, -23, -48, -13, -70, -14, -28, -7,
	5, -98, -28, 10, -50, -10, -32, 2, -42, 11, -4, 36,
	-65, 37, -9, 19, -52, 28, -94, 3, 228, 74, 53, 73,
	69, 22, 52, 52, 56, 8, 21, 80, 55, 6, 41, 5,
	54, 21, 95, 83, 8, -75, -6, -27, 23, -32, 14, -27,
	20, -34, -2, -57, -2, -28, -7, -32, -11, -21, 19, -70,
	-20, -7, -16, -32, -25, -15, -27, -17, -21, -13, -25, 0,
	-10, -7, 17, -20, 48, -41, -154, 48, -59, 75, -44, 45,
	-19, 42, 1, 39, -18, 33, -2, 43, -1, 36, 30, 33,
	48, 150, 46, -33, 10, -11, 17, 5, 23, 9, 36, 2,
	29, 2, 22, -9, -1, -16, 11, -8, 47, -38, -1, -14,
	2, -20, 7, 4, 9, -25, -2, 7, 5, -30, -5, -1,
	8, 0, 14, -18, -7, 0, -6, 2, 10, -10, -4, 8,
	7, -3, 8, -3, 9, 7, -8, 10, 2, -3, 12, 8,
	19, -7, -1, -4, -2, -9, -3, 9, -3, 6, 18, -2,
	10, -1, 2, -1, -1, -6, 0, 5, -4, 10, 4, 1,
	0, -10, -6, 7, -4, 4, 8, 21, 8, -9, 3, 19,
	4, 32, 14, -6, -1, 29, 0, 13, 11, 22, 16, 9,
	56, 55, 5, -11, 2, 28, 22, 9, 25, 8, 22, 12,
	17, -2, 13, -6, 7, 10, 40, 31, 72, -156, 39, -36,
	5, -32, 12, -46, -16, -44, 17, -55, -21, -48, -22, -35,
	-50, -65, -141, -52, 40, 37, 12, 17, -21, -15, -16, -15,
	-28, 6, -10, 3, -21, 24, -14, 18, -20, 4, 8, 62,
	-12, 11, -6, 38, -9, 31, 1, 75, 24, 38, 12, 37,
	26, 38, -11, 31, 5, 80, 98, -86, 64, -30, 31, -18,
	61, -10, 21, -63, 50, -9, 55, -55, 66, -13, 48, -53,
	219, -56, -86, -15, -58, -36, -12, -19, -56, -42, 5, -34,
	-27, -27, -17, 4, -48, -3, -20, -6, -1, 83, -29, 3,
	-65, 7, -45, 10, -44, 29, -23, 62, -58, 49, -28, 52,
	-39, 49, -14, 147, 27, -68, -7, 45, -8, 41, 10, 65,
	31, 40, 32, 63, 36, 6, 56, 71, 122, 39, 289, -121,
	1, 45, 56, 4, 33, 6, 96, -99, 47, 10, 43, -16,
	67, -40, 81, -38, 126, -58, -303, -140, -63, -55, 8, -75,
	-45, -88, 3, -31, -38, -54, -66, -54, -79, -34, -112, -52,
	-396, -18, 216, -26, 69, -15, 42, -17, 25, -15, 34, -26,
	40, 1, 38, -10, 141, -27, -83, 30,
};


short buf[2 * NINPUTS] = { 2, 1, -4, -1, -3, -1, -8, -2, -10, -2, -11, -2, -23, -3, 11, -1,
32, 0, 10, 0, 11, 1, 8, 2, 3, 2, 3, 3, -7, 3, -5, 2, 1, 2, -4, 2,
-4, 2, -4, 1, -9, 0, -5, 0, -4, -1, -8, -1, -5, -2, -2, -2, 0, -2,
0, -3, -6, -3, -7, -3, -2, -3, 3, -2, 3, -2, 8, -1, 15, 0, 10, 1,
6, 1, 6, 2, 1, 3, 4, 3, -1, 3, -10, 3, -4, 2, -2, 2, -9, 1, -5, 1,
-7, 0, -8, 0, -2, -1, -5, -1, -6, -2, -2, -2, -3, -2, 1, -2, -3, -3,
-8, -3, -6, -3, 0, -2, 5, -2, 4, -1, 15, 0, 17, 1, 6, 1, 5, 2, 2, 3,
0, 3, 2, 4, -3, 3, -5, 3, 0, 3, -5, 2, -5, 2, -4, 1, -9, 1, -6, 0, -2,
0, -4, -1, -4, -1, -3, -2, -1, -2, 1, -3, -5, -3, -7, -3, -4, -3, 3, -2,
5, -2, 6, -1, 20, 0, 16, 1, 8, 2, 7, 3, 3, 3, 7, 4, 4, 4, -5, 4, -4, 3, -3,
3, -8, 2, -6, 2, -7, 1, -7, 0, -1, 0, -2, -1, -2, -1, -2, -2, -3, -2, 1, -2,
1, -3, -5, -3, -4, -3, 2, -3, 6, -2, 7, -2, 13, -1, 17, 0, 8, 1, 7, 2, 6, 2,
2, 3, 7, 3, 4, 4, 0, 3, -3, 3, -6, 3, -2, 2, -3, 2, -7, 1, -7, 0, -4, -1, -5,
-1, -4, -2, -2, -2, 1, -3, 4, -3, -2, -4, -4, -3, -1, -4, 3, -3, 5, -2, 5, -2,
18, 0, 19, 1, 9, 1, 7, 2, 2, 2, 4, 3, 2, 3, -6, 3, -5, 2, 0, 2, -1, 2, -2, 2, -5,
1, -8, 0, -2, 0, -4, -1, -7, -2, -5, -2, -4, -3, 1, -3, 0, -3, -5, -4, -4, -4, 1,
-3, 3, -3, 3, -2, 7, -1, 15, 0, 11, 0, 6, 1, 5, 2, 2, 2, 6, 3, 3, 3, -5, 3, -4, 3,
-4, 2, -7, 2, -6, 1, -9, 1, -8, 0, -3, 0, -4, -1, -5, -1, -5, -2, -4, -2, 1, -2, -3,
-3, -7, -3, -5, -3, 0, -3, 4, -2, 3, -2, 12, -1, 15, 0, 7, 1, 5, 2, 4, 2, 1, 3, 1, 3,
-5, 3, -7, 2, -1, 2, -2, 2, -5, 2, -4, 1, -8, 0, -7, 0, -3, 0, -6, -1, -6, -1, -5, -2,
-3, -2, 0, -3, -5, -3, -6, -3, -3, -3, 1, -3, 2, -2, 3, -2, 13, 0, 14, 1, 9, 1, 6, 2, 3,
3, 4, 3, 3, 4, -4, 4, -6, 3, -3, 3, -5, 3, -5, 2, -6, 1, -9, 1, -5, 0, -3, 0, -5, -1, -5,
-2, -3, -2, 0, -2, 0, -3, -5, -3, -3, -3, 1, -3, 3, -2, 3, -2, 9, -1, 16, 0, 10, 1, 6, 2,
6, 2, 6, 3, 8, 4, 2, 4, -2, 4, -2, 3
};




void fft_pre(short *data, int len) {

	int max = len;
	len <<= 1;
	int wstep = 1;

	short *wpr = wprBase;
	short *wpi = wpiBase;

	for (int m = 0; m < max; m += 2) {
		short wr = *wpr;
		short wi = *wpi;
		wpr += wstep;
		wpi += wstep;

		int step = max << 1;

		for (int i = m; i < len; i += step) {
			int j = i + max;

			short tr = data[i] - data[j];
			short ti = data[i + 1] - data[j + 1];

			data[i] += data[j];
			data[i + 1] += data[j + 1];

			int xr = ((wr * tr + wi * ti) << 1) + 0x8000;
			int xi = ((wr * ti - wi * tr) << 1) + 0x8000;

			data[j] = xr >> 16;
			data[j + 1] = xi >> 16;
		}
	}
	max >>= 1;
	wstep <<= 1;

}


void fft_firstHalf(short *data, int len)
{
	len <<= 1;
	int max = NINPUTS / 2;
	int wstep = 2;
	while (max > 2) {
		short *wpr = wprBase;
		short *wpi = wpiBase;

		for (int m = 0; m < max; m += 2) {
			short wr = *wpr;
			short wi = *wpi;
			wpr += wstep;
			wpi += wstep;

			int step = max << 1;

			for (int i = m; i < len / 2; i += step) {
				int j = i + max;

				short tr = data[i] - data[j];
				short ti = data[i + 1] - data[j + 1];

				data[i] += data[j];
				data[i + 1] += data[j + 1];

				int xr = ((wr * tr + wi * ti) << 1) + 0x8000;
				int xi = ((wr * ti - wi * tr) << 1) + 0x8000;

				data[j] = xr >> 16;
				data[j + 1] = xi >> 16;
			}


		}
		max >>= 1;
		wstep <<= 1;
	}

	///////////////////////////

}

void fft3_secondHalf(short *data, int len)
{
	len <<= 1;
	int max = NINPUTS / 2;
	int wstep = 2;
	while (max > 2) {
		short *wpr = wprBase;
		short *wpi = wpiBase;

		for (int m = 0; m < max; m += 2) {
			short wr = *wpr;
			short wi = *wpi;
			wpr += wstep;
			wpi += wstep;

			int step = max << 1;

			for (int i = m + len / 2; i < len; i += step) {
				int j = i + max;

				short tr = data[i] - data[j];
				short ti = data[i + 1] - data[j + 1];

				data[i] += data[j];
				data[i + 1] += data[j + 1];

				int xr = ((wr * tr + wi * ti) << 1) + 0x8000;
				int xi = ((wr * ti - wi * tr) << 1) + 0x8000;

				data[j] = xr >> 16;
				data[j + 1] = xi >> 16;
			}


		}
		max >>= 1;
		wstep <<= 1;
	}


}




void merge(short *data, int len)
{
	len <<= 1;
	{
		int max = 2;
		int step = max << 1;

		for (int i = 0; i < len; i += step) {
			int j = i + max;

			short tr = data[i] - data[j];
			short ti = data[i + 1] - data[j + 1];

			data[i] += data[j];
			data[i + 1] += data[j + 1];


			data[j] = tr;
			data[j + 1] = ti;
		}
	}



	data--;
	int j = 1;
	for (int i = 1; i < len; i += 2) {
		if (j > i) {
			short tmp;
			SWAP(data[j], data[i]);
			SWAP(data[j + 1], data[i + 1]);
		}
		int m = len >> 1;
		while (m >= 2 && j >m) {
			j -= m;
			m >>= 1;
		}
		j += m;
	}
}
int main()
{


	fft_pre(buf, NINPUTS);   // Thuc hien giai thuat FFT
	fft_firstHalf(buf, NINPUTS);
	fft3_secondHalf(buf, NINPUTS);
	merge(buf, NINPUTS);
	//===============================================//

	for (int i = 0; i != 2 * NINPUTS; ++i)
		if (buf[i] != ref[i])
		{
			printf("Sai tai diem buf[%d]", i);	// Kiem tra ket qua
			return 0;
		}

	printf("Test OK !!\n");
	return 0;
}